apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
apply plugin: "kotlin-android"
apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"
apply plugin: "com.google.gms.google-services"

import org.apache.tools.ant.taskdefs.condition.Os

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '../..'
    // root = file("../../")
    //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native
    // reactNativeDir = file("../../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen
    // codegenDir = file("../../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../../node_modules/react-native/cli.js
    // cliFile = file("../../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]

    /* Autolinking */
    autolinkLibrariesWithApp()
}

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = io.github.react-native-community:jsc-android-intl:2026004.+`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

/**
 * Simple text styler using ASCII codes.
 */
def styler = 'black red green yellow blue magenta cyan white'
    .split().toList().withIndex(30)
    .collectEntries { key, val -> [(key) : { "\033[${val}m${it}\033[0m" }] }

/**
 * Access keystore passwords from Keychain Access on macOS.
 */
def getPassword(String currentUser, String keyChain) {
   def stdout = new ByteArrayOutputStream()
   def stderr = new ByteArrayOutputStream()

   exec {
       commandLine 'security', '-q', 'find-generic-password', '-a', currentUser, '-s', keyChain, '-w'
       standardOutput = stdout
       errorOutput = stderr
       ignoreExitValue true
   }
   stdout.toString().trim()
}

android {
    ndkVersion rootProject.ext.ndkVersion

    compileSdkVersion rootProject.ext.compileSdkVersion

    namespace "app.tennisrobin"
    defaultConfig {
        applicationId "app.tennisrobin"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 9
        versionName "1.0.0"

        manifestPlaceholders = [ gmsServicesApiKey: GMSSERVICES_API_KEY ]
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            if (Os.isFamily(Os.FAMILY_MAC)) {
                def keystore_pwd = getPassword("Tennis", "android_keystore")
                def signing_pwd = getPassword("Tennis", "android_app_play")
                def keychain_error = false

                if (!keystore_pwd) {
                    println "${styler['red']('ERROR: Keystore password not found in Keychain.')}"
                    println "${styler['red']('Check Keychain for key name \"android_keystore\" using account \"RCTennis\"')}"
                    println ""
                    keychain_error = true
                }

                if (!signing_pwd) {
                    println "${styler['red']('ERROR: App signing password not found in Keychain.')}"
                    println "${styler['red']('Check Keychain for key name \"android_signing\" using account \"RCTennis\"')}"
                    keychain_error = true
                }

                if (keychain_error) {
//                    throw new GradleException('Error getting app signing password(s)')
                }

                storeFile file('../../../.keystore')
                storePassword keystore_pwd
                keyAlias 'app_play'
                keyPassword signing_pwd

                println "${styler['cyan']('info ')}" + "Reading app signing passwords from your Keychain."
                
            } else {
                println "${styler['yellow']('WARNING: This platform is not supported for signing via the CLI.')}"
                println "${styler['yellow']('Use Android Studio to build and sign the release.')}"
            }
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }

    implementation project(':react-native-version-number')
    implementation("androidx.core:core-splashscreen:1.0.0")

    implementation platform('com.google.firebase:firebase-bom:31.2.2')
    implementation 'com.facebook.android:facebook-android-sdk:latest.release'

    implementation project(':react-native-fs')
}
